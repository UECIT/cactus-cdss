package uk.nhs.cdss.rules

import java.util.List;

import uk.nhs.cdss.domain.Answer
import uk.nhs.cdss.domain.Assertion
import uk.nhs.cdss.domain.Assertion.Status
import uk.nhs.cdss.domain.CarePlan
import uk.nhs.cdss.domain.Redirection
import uk.nhs.cdss.domain.CodeableConcept
import uk.nhs.cdss.domain.Questionnaire
import uk.nhs.cdss.domain.QuestionnaireResponse
import uk.nhs.cdss.domain.Outcome

declare Checkpoint
    id: String
end

declare InitialQuestionnaire
    id: String @key
end

declare NextQuestion
    next: String @key
    questionnaireId: String @key
    questionId: String @key
    answers: List
end

declare ConditionalNextQuestion
    id: String @key
    next: String @key
    questionnaireId: String @key
    questionId: String @key
    answers: List
end

declare NextQuestionCondition
    id: String @key
    questionnaireId: String @key
    questionId: String @key
    answers: List
end

declare AnswersOptional
    questionnaireId: String @key
    questionId: String @key
end

declare HighPriorityNextQuestion
    next: String @key
    questionnaireId: String @key
    questionId: String @key
    answers: List
end

declare Answered
    questionnaireId: String @key
    questionId: String @key
    value: Object
end

declare OutcomeAnswerCondition
    id: String @key
    questionnaireId: String @key
    questionId: String @key
    answers: List
end

declare ActiveOutcome
    id: String
    draft: Boolean
end

declare AnswerAssertion
    questionnaireId: String @key
    questionId: String @key
    answer: String @key

    code: CodeableConcept @key
    value: Object
end

// Check whether a questionnaire has been answered or can be bypassed
rule "Answer present"
    salience 20
when
    $a: Answer( $id := questionnaireId, $questionId := questionId )
then
    System.out.println("Answered: "+ $id + " " + $questionId);
    insert( new Answered($id, $questionId, $a.getValue()) );
end

rule "Assertion present"
    salience 20
when
    $aa: AnswerAssertion( $id := questionnaireId, $questionId := questionId, $value := value)
    Assertion( code == $aa.code, $value == value)
    not Answered( $id := questionnaireId, $questionId := questionId )
then
    System.out.println("Answered question "+ $id + " " + $questionId + " = " + $aa.getAnswer() + " with assertion " + $aa.getCode() + " = " + $aa.getValue());
    insert( new Answered($id, $questionId, $aa.getAnswer()) );
end

// If no value or answer provided in answer assertion, answer the question with the value of the assertion
rule "Any assertion present"
    salience 20
when
    $aa: AnswerAssertion( $id := questionnaireId, $questionId := questionId, value == null, answer == null)
    Assertion( code == $aa.code, $value := value)
then
    System.out.println("Answered question "+ $id + " " + $questionId + " with assertion " + $aa.getCode() + " = " + $value);
    insert( new Answered($id, $questionId, $value) );
end

rule "No answer question"
salience 30
when
    AnswersOptional($questionnaireId := questionnaireId, $questionId := questionId)
    $qr: QuestionnaireResponse($questionnaireId := questionnaireId, answers.isEmpty())
then
    insert( new Answer($questionnaireId, $questionId, Answer.MISSING));
end


// Question Flow
rule "Ask first question"
    salience -1
when
    not Questionnaire()
    not ActiveOutcome( draft == false )
    $q: InitialQuestionnaire()
then
    System.out.println("No answers: requesting questionnaire " + $q.getId());
    insert( new Questionnaire($q.getId()) );
end

rule "Next question from Answer"
    salience 10
when
    NextQuestion( $questionnaireId := questionnaireId, $questionId := questionId, $next := next, $answers := answers )
    $a: Answered( $questionnaireId := questionnaireId, $questionId := questionId, $answers == null || $answers.isEmpty() || value memberOf $answers)
    not Answered( $next := questionnaireId )
    not Questionnaire( )
    not ActiveOutcome( draft == false )
then
    System.out.println("Have answer for " + $questionnaireId + "#" + $questionId + " == " + $a.getValue() + ": requesting questionnaire " + $next);
    insert( new Questionnaire($next) );
end

rule "Conditional next question from Answer"
    salience 10
when
    ConditionalNextQuestion($id := id, $questionnaireId := questionnaireId, $questionId := questionId, $next := next, $answers := answers )
    $a: Answered( $questionnaireId := questionnaireId, $questionId := questionId, $answers == null || $answers.isEmpty() || value memberOf $answers)
    not Answered( $next := questionnaireId )
    not Questionnaire( )
    not ActiveOutcome()
    // Make sure all conditions for the next question have been met with the valid answers in the 'Answered' object
    (forall (
        $oac : NextQuestionCondition( $id := id, $cquestionnaireId := questionnaireId, $cquestionId := questionId, $canswers := answers )
        Answered( $cquestionnaireId := questionnaireId, $cquestionId := questionId, $canswers == null || $canswers.isEmpty() || value memberOf $canswers)
    ))
then
    System.out.println("Have answer for " + $questionnaireId + "#" + $questionId + " == " + $a.getValue() + ": requesting questionnaire " + $next);
    insert( new Questionnaire($next) );
end

rule "High priority next question from Answer"
    salience 15
when
    HighPriorityNextQuestion( $questionnaireId := questionnaireId, $questionId := questionId, $next := next, $answers := answers )
    $a: Answered( $questionnaireId := questionnaireId, $questionId := questionId, $answers == null || $answers.isEmpty() || value memberOf $answers)
    not Answered( $next := questionnaireId )
    not Questionnaire( )
    not ActiveOutcome( draft == false )
then
    System.out.println("Have answer for " + $questionnaireId + "#" + $questionId + " == " + $a.getValue() + ": requesting questionnaire " + $next);
    insert( new Questionnaire($next) );
end

rule "Outcome from Answers"
    salience 200
when
    not ActiveOutcome( draft == false )
    $o: Outcome( $id := id )
    // Make sure all conditions for the outcome have been met with the valid answers in the 'Answered' object
    (forall (
        $oac : OutcomeAnswerCondition( $id := id, $questionnaireId := questionnaireId, $questionId := questionId, $answers := answers )
        $a: Answered( $questionnaireId := questionnaireId, $questionId := questionId, $answers == null || $answers.isEmpty() || value memberOf $answers)
    ))
then
    System.out.println("All conditions for outcome " + $o);
    insert( new ActiveOutcome($id, $o.isDraft()) );
end

// Simple assertions
rule "Simple Assertions"
    salience 20
when
    $a: Answer( $qid := questionnaireId, $ref := questionId )
    $m: AnswerAssertion( $qid := questionnaireId, $ref := questionId, answer == $a.value )
then
    String question = $qid + "#" + $ref;
    System.out.println("Assertion: " + question + " == " + $m.getAnswer() + " => " + $m.getCode() + " == " + $m.getValue());
    Assertion assertion = new Assertion(question, Assertion.Status.AMENDED);
    assertion.setCode($m.getCode());
    assertion.setValue($m.getValue());
    assertion.getRelated().add($a.getQuestionnaireResponse());
    insert(assertion);
end


// Queries
query "assertions"
  assertion : Assertion()
end

query "questionnaires"
  questionnaire : Questionnaire()
end

query "outcomes"
  outcome: Outcome($id:=id)
  ActiveOutcome($id:=id)
end