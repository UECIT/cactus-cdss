package uk.nhs.cdss.rules.palpitations2

import java.util.Arrays

import uk.nhs.cdss.rules.InitialQuestionnaire
import uk.nhs.cdss.rules.NextQuestion
import uk.nhs.cdss.rules.ConditionalNextQuestion
import uk.nhs.cdss.rules.NextQuestionCondition
import uk.nhs.cdss.rules.AnswerAssertion
import uk.nhs.cdss.rules.Answered
import uk.nhs.cdss.rules.OutcomeAnswerCondition

import uk.nhs.cdss.domain.Answer
import uk.nhs.cdss.domain.Assertion
import uk.nhs.cdss.domain.Assertion.Status
import uk.nhs.cdss.domain.Concept
import uk.nhs.cdss.domain.Patient
import uk.nhs.cdss.domain.Patient.Sex
import uk.nhs.cdss.domain.Questionnaire
import uk.nhs.cdss.constants.SnomedConstants
import uk.nhs.cdss.domain.Outcome
import uk.nhs.cdss.domain.CarePlan
import uk.nhs.cdss.domain.CarePlanActivity
import uk.nhs.cdss.domain.ReferralRequest
import uk.nhs.cdss.domain.Redirection

import uk.nhs.cdss.engine.CodeDirectory
import uk.nhs.cdss.engine.Constraints
import org.slf4j.Logger

global Logger log;
global CodeDirectory codeDirectory;

/**
 * Question flow for extended palpitations triage example
 *
 * Based on version 0.4 of example decision flow diagram
 */

function Outcome heartAttack(String id, CarePlan[] carePlans) {
    return Outcome.of(id, 
        ReferralRequest.builder()
            .id("call999-cardio-ami-8m")
            .serviceRequested("call999")
            .description("Call 999")
            .occurrence("PT8m")
            .specialty("cardio")
            .reason("ami")
            .note("A note")
            .build(),
            carePlans
    );
}

function Outcome hypertension(String id, String description, String serviceRequested) {
    return Outcome.of(id,
        ReferralRequest.builder()
            .id("hypertension-12h")
            .description(description)
            .serviceRequested(serviceRequested)
            .occurrence("PT12h")
            .specialty("primaryCareReview")
            .reason("hypertension")
            .note("A note")
            .build()
    );
}

function Outcome edHeartAttack(String id) {
    return Outcome.of(id,
        ReferralRequest.builder()
            .id("ed-cardio-mi-8m")
            .description("ED")
            .serviceRequested("ed")
            .occurrence("PT8m")
            .specialty("cardio")
            .reason("mi")
            .note("A note")
            .build()
    );
}

function Outcome utcStroke(String id) {
    return Outcome.of(id,
        ReferralRequest.builder()
            .id("utc-primary-care-stroke")
            .description("UTC")
            .serviceRequested("utc")
            .occurrence("PT4h")
            .specialty("primaryCareReview")
            .reason("stroke")
            .note("A note")
            .build(),
        defaultCarePlan()
    );
}

function Outcome utcArrhythmia(String id, String occurrence, String specialty) {
    return Outcome.of(id,
        ReferralRequest.builder()
            .id("utc-arrhythmia")
            .description("UTC")
            .serviceRequested("utc")
            .occurrence(occurrence)
            .specialty(specialty)
            .reason("arrhythmia")
            .note("A note")
            .build()
    );
}

function Outcome gpArrhythmia(String id, String occurrence) {
    return Outcome.of(id,
        ReferralRequest.builder()
            .id("gp-arrhythmia")
            .description("Consult GP")
            .serviceRequested("gp")
            .occurrence(occurrence)
            .specialty("gp")
            .reason("arrhythmia")
            .note("A note")
            .build()
    );
}

function CarePlan defaultCarePlan() {
    return CarePlan.builder()
        .id("carePlan")
        .title("Self care")
        .text("After Care Instructions")
        .activity(new CarePlanActivity("selfCare", "Try sitting cross-legged and taking a slow breath in through your nostrils and then out through your mouth. Repeat until you feel calm."))
        .build();
}

function CarePlan waitForAmbulance() {
    return CarePlan.builder()
            .id("waitForAmbulance")
            .title("Wait for an ambulance")
            .text("Care advice")
            .activity(new CarePlanActivity("selfCare", "Try to get someone to sit with you until the ambulance arrives"))
            .activity(new CarePlanActivity("selfCare", "Unlock doors"))
            .activity(new CarePlanActivity("selfCare", "If you have a dog put them in another room"))
            .activity(new CarePlanActivity("selfCare", "Collect any medications to take to the hospital"))
            .activity(new CarePlanActivity("selfCare", "Take a mobile phone if you have one"))
            .build();
}

function CarePlan aspirin() {
    return CarePlan.builder()
            .id("aspirin")
            .title("Aspirin")
            .text("Interim Care Advice")
            .activity(new CarePlanActivity("selfCare", "If not allergic to Aspirin take 300mg now."))
            .build();    
}

function Outcome singleCodeRedirection(String id, String code) {
    return Outcome.of(id, Redirection.builder()
            .id(code)
            .code(code)
            .build());
}

rule "Init"
salience 10000
when // Always
then
    // Are you experiencing palpitations now?
    insert( new InitialQuestionnaire("palpitations2.hasPalpitations") );
    insert( new AnswerAssertion("palpitations2.hasPalpitations", "q", "Yes", codeDirectory.get("palpitations"), true));

    // Have you got an ICD (implanted cardiovascular defibrillator)?
    insert( new NextQuestion("palpitations2.hasICD", "palpitations2.hasPalpitations", "q", Arrays.asList("Yes")) );
    insert( new AnswerAssertion("palpitations2.hasICD", "q", "Yes", codeDirectory.get("hasICD"), true));
    insert( heartAttack("hasICD", new CarePlan[]{waitForAmbulance(), aspirin()}) );
    insert( new OutcomeAnswerCondition("hasICD", "palpitations2.hasICD", "q", Arrays.asList("Yes") ));

    // Have you had any of the following symptoms in the last 24 hours?
    insert( new NextQuestion("palpitations2.symptoms", "palpitations2.hasICD", "q", Arrays.asList("No", "Unsure")) );
    insert( new AnswerAssertion("palpitations2.symptoms", "q", "chestPains", codeDirectory.get("chestPain"), true));
    insert( new AnswerAssertion("palpitations2.symptoms", "q", "neckPain", codeDirectory.get("neckPain"), true));
    insert( new AnswerAssertion("palpitations2.symptoms", "q", "breathingProblems", codeDirectory.get("breathingProblems"), true));
    insert( new AnswerAssertion("palpitations2.symptoms", "q", "syncope", codeDirectory.get("syncope"), true));
    insert( new AnswerAssertion("palpitations2.symptoms", "q", "none", codeDirectory.get("noSymptoms"), true));
    insert( heartAttack("symptoms", new CarePlan[]{waitForAmbulance()}) );
    insert( new OutcomeAnswerCondition("symptoms", "palpitations2.symptoms", "q", Arrays.asList("chestPains", "neckPain", "breathingProblems", "syncope") ));

    insert( new NextQuestion("palpitations2.ageRange", "palpitations2.symptoms", "q", Arrays.asList("none")));
    insert( new AnswerAssertion("palpitations2.ageRange", "q", "<12", codeDirectory.get("under12"), true));
    insert( new AnswerAssertion("palpitations2.ageRange", "q", "12-45", codeDirectory.get("between12and45"), true));
    insert( new AnswerAssertion("palpitations2.ageRange", "q", "45-50", codeDirectory.get("between45and50"), true));
    insert( new AnswerAssertion("palpitations2.ageRange", "q", ">50", codeDirectory.get("over50"), true));

    insert( new NextQuestion("common.gender", "palpitations2.ageRange"));

    insert( new ConditionalNextQuestion("genderToPregnant", "common.pregnant", "common.gender", "q", Arrays.asList("Female")) );
    insert( new NextQuestionCondition("genderToPregnant", "palpitations2.ageRange", "q", Arrays.asList("12-45", "45-50")) );

    insert( new ConditionalNextQuestion("genderToFamilyHistoryUnder12", "palpitations2.familyHistory", "common.gender") );
    insert( new NextQuestionCondition("genderToFamilyHistoryUnder12", "palpitations2.ageRange", "q", Arrays.asList("<12")) );
    insert( new ConditionalNextQuestion("genderToFamilyHistoryOver12", "palpitations2.familyHistory", "common.gender") );
    insert( new NextQuestionCondition("genderToFamilyHistoryOver12", "palpitations2.ageRange", "q", Arrays.asList("12-45")) );
    insert( new NextQuestionCondition("genderToFamilyHistoryOver12", "common.gender", "q", Arrays.asList("Male")) );

    insert( new ConditionalNextQuestion("genderToPersonalHistoryOver50", "palpitations2.personalHistory", "common.gender") );
    insert( new NextQuestionCondition("genderToPersonalHistoryOver50", "palpitations2.ageRange", "q", Arrays.asList(">50")) );
    insert( new NextQuestionCondition("genderToPersonalHistoryOver50", "palpitations2.hasPalpitations", "q", Arrays.asList("Yes") ));
    insert( new ConditionalNextQuestion("genderToPersonalHistoryOver12", "palpitations2.personalHistory", "common.gender") );
    insert( new NextQuestionCondition("genderToPersonalHistoryOver12", "palpitations2.ageRange", "q", Arrays.asList("45-50")) );
    insert( new NextQuestionCondition("genderToPersonalHistoryOver12", "common.gender", "q", Arrays.asList("Male")) );
    insert( new NextQuestionCondition("genderToPersonalHistoryOver12", "palpitations2.hasPalpitations", "q", Arrays.asList("Yes") ));

    insert( hypertension("pregnancy-hasPalpitations", "Speak to Primary Care professional", "primaryCare"));
    insert( new OutcomeAnswerCondition("pregnancy-hasPalpitations", "common.pregnant", "q", Arrays.asList("Yes") ));
    insert( new OutcomeAnswerCondition("pregnancy-hasPalpitations", "palpitations2.hasPalpitations", "q", Arrays.asList("Yes") ));
    insert( hypertension("pregnancy-noPalpitations", "Consult GP", "gp"));
    insert( new OutcomeAnswerCondition("pregnancy-noPalpitations", "common.pregnant", "q", Arrays.asList("Yes") ));
    insert( new OutcomeAnswerCondition("pregnancy-noPalpitations", "palpitations2.hasPalpitations", "q", Arrays.asList("No") ));

    insert( new ConditionalNextQuestion("pregnancyToFamilyHistory", "palpitations2.familyHistory", "common.pregnant", "q", Arrays.asList("No", "Unsure")) );
    insert( new NextQuestionCondition("pregnancyToFamilyHistory", "palpitations2.ageRange", "q", Arrays.asList("12-45")) );
    insert( new ConditionalNextQuestion("pregnancyToPersonalHistory", "palpitations2.personalHistory", "common.pregnant", "q", Arrays.asList("No", "Unsure")) );
    insert( new NextQuestionCondition("pregnancyToPersonalHistory", "palpitations2.ageRange", "q", Arrays.asList("45-50")) );
    insert( new NextQuestionCondition("pregnancyToPersonalHistory", "palpitations2.hasPalpitations", "q", Arrays.asList("Yes") ));

    // Family history of sudden cardiac death under the age of 40 years
    insert( new AnswerAssertion("palpitations2.familyHistory", "q", "Yes", codeDirectory.get("familyHistorySCD"), true));
    insert( edHeartAttack("palpitationsFamilyHistory"));
    insert( new OutcomeAnswerCondition("palpitationsFamilyHistory", "palpitations2.familyHistory", "q", Arrays.asList("Yes") ));
    insert( new OutcomeAnswerCondition("palpitationsFamilyHistory", "palpitations2.hasPalpitations", "q", Arrays.asList("Yes") ));
    insert( Outcome.of("noPalpitationsFamilyHistory", ReferralRequest.builder()
                .id("utc-ami-12h")
                .description("UTC")
                .serviceRequested("utc")
                .occurrence("PT12h")
                .specialty("primaryCareReview")
                .reason("ami")
                .note("A note")
                .build()));
    insert( new OutcomeAnswerCondition("noPalpitationsFamilyHistory", "palpitations2.familyHistory", "q", Arrays.asList("Yes") ));
    insert( new OutcomeAnswerCondition("noPalpitationsFamilyHistory", "palpitations2.hasPalpitations", "q", Arrays.asList("No") ));

    insert( new ConditionalNextQuestion("familyHistoryToPersonalHistory", "palpitations2.personalHistory", "palpitations2.familyHistory", "q", Arrays.asList("No", "Unsure")) );
    insert( new NextQuestionCondition("familyHistoryToPersonalHistory", "palpitations2.hasPalpitations", "q", Arrays.asList("Yes")) );

    // Have you had any cardiac problems in the past?
    insert( new AnswerAssertion("palpitations2.personalHistory", "q", "Yes", codeDirectory.get("personalHistory"), true));

    // Have you had any pain in your chest or upper back in the last 24 hours
    insert( new NextQuestion("palpitations2.chestPain24", "palpitations2.personalHistory", "q", Arrays.asList("Yes")) );
    insert( new AnswerAssertion("palpitations2.chestPain24", "q", "Yes", codeDirectory.get("chestPain24"), true));
    insert( edHeartAttack("palpitationsChestPain24"));
    insert( new OutcomeAnswerCondition("palpitationsChestPain24", "palpitations2.chestPain24", "q", Arrays.asList("Yes") ));

    // Have you seen a healthcare professional in the last 7 days about your heart problems
    insert( new NextQuestion("palpitations2.seenHCP", "palpitations2.chestPain24", "q", Arrays.asList("No")) );

    // Have you had a recent 12 lead EC?
    insert( new NextQuestion("palpitations2.hadECG", "palpitations2.seenHCP", "q", Arrays.asList("Yes")) );
    insert( new AnswerAssertion("palpitations2.hadECG", "q", "Yes", codeDirectory.get("hadECG"), true));
    insert( Outcome.of("hadECG", ReferralRequest.builder()
                .id("primaryCareReview")
                .description("Speak to Primary Care professional")
                .serviceRequested("primaryCare")
                .occurrence("PT12h")
                .specialty("primaryCareReview")
                .note("A note")
                .build()));
    insert( new OutcomeAnswerCondition("hadECG", "palpitations2.hadECG", "q", Arrays.asList("Yes") ));

    // Have you had any of the following symptoms of a stroke in the last 7 days?
    insert( new NextQuestion("palpitations2.strokeSymptoms", "palpitations2.hadECG", "q", Arrays.asList("No")) );
    insert( new NextQuestion("palpitations2.strokeSymptoms", "palpitations2.seenHCP", "q", Arrays.asList("No")) ); // TODO - Confirm - not in v0.4

    //  Face dropped
    insert( new AnswerAssertion("palpitations2.strokeSymptoms", "q1", "Yes", codeDirectory.get("faceDropped"), true));
    insert( utcStroke("faceDropped"));
    insert( new OutcomeAnswerCondition("faceDropped", "palpitations2.strokeSymptoms", "q1", Arrays.asList("Yes") ));
    insert( new OutcomeAnswerCondition("faceDropped", "palpitations2.strokeSymptoms", "q4", Arrays.asList("No") ));

    //  Arm lift problems
    insert( new AnswerAssertion("palpitations2.strokeSymptoms", "q2", "Yes", codeDirectory.get("armLiftProblems"), true));
    insert( utcStroke("armListProblems"));
    insert( new OutcomeAnswerCondition("armListProblems", "palpitations2.strokeSymptoms", "q2", Arrays.asList("Yes") ));
    insert( new OutcomeAnswerCondition("armListProblems", "palpitations2.strokeSymptoms", "q4", Arrays.asList("No") ));

    //  Speaking problems
    insert( new AnswerAssertion("palpitations2.strokeSymptoms", "q3", "Yes", codeDirectory.get("speakingProblems"), true));
    insert( utcStroke("speakingProblems"));
    insert( new OutcomeAnswerCondition("speakingProblems", "palpitations2.strokeSymptoms", "q3", Arrays.asList("Yes") ));
    insert( new OutcomeAnswerCondition("speakingProblems", "palpitations2.strokeSymptoms", "q4", Arrays.asList("No") ));
    //  Symptoms right now
    insert( new AnswerAssertion("palpitations2.strokeSymptoms", "q4", "Yes", codeDirectory.get("strokeSymptomsRightNow"), true));
    insert( Outcome.of("strokeSymptomsRightNow", ReferralRequest.builder()
                .id("call999-stroke")
                .description("Call 999")
                .serviceRequested("call999")
                .occurrence("PT18m")
                .specialty("primaryCareReview")
                .note("A note")
                .reason("stroke")
                .build(),
            defaultCarePlan()));
    insert( new OutcomeAnswerCondition("strokeSymptomsRightNow", "palpitations2.strokeSymptoms", "q4", Arrays.asList("Yes") ));

    // Onset of palpitations precipitated by exercise
    insert( new NextQuestion("palpitations2.exercise", "palpitations2.personalHistory", "q", Arrays.asList("No")) );
    insert( new NextQuestion("palpitations2.exercise", "palpitations2.strokeSymptoms", "q5", Arrays.asList("Yes")) );
    insert( new AnswerAssertion("palpitations2.exercise", "q", "Yes", codeDirectory.get("exerciseTriggered"), true));
    insert( Outcome.of("exerciseTriggered", ReferralRequest.builder()
                .id("ed-cardio-arrhythmia-4h")
                .description("ED")
                .serviceRequested("ed")
                .occurrence("PT4h")
                .specialty("cardio")
                .reason("arrhythmia")
                .note("A note")
                .build(),
            defaultCarePlan()));
    insert( new OutcomeAnswerCondition("exerciseTriggered", "palpitations2.exercise", "q", Arrays.asList("Yes") ));
    insert( utcArrhythmia("notExerciseTriggered", "PT4h", "emergencyCareReview"));
    insert( new OutcomeAnswerCondition("notExerciseTriggered", "palpitations2.exercise", "q", Arrays.asList("No") ));

    // When did you last experience palpitations
    insert( new NextQuestion("palpitations2.lastExperienced", "palpitations2.hasPalpitations", "q", Arrays.asList("No", "Unsure")) );

    // Syncope or near syncope
    insert( new AnswerAssertion("palpitations2.syncope", "q", "Yes", codeDirectory.get("syncope"), true));
    //  If last experienced within 12 hours
    insert( new NextQuestion("palpitations2.syncope", "palpitations2.lastExperienced", "q1", Arrays.asList("Yes")));
    insert( new AnswerAssertion("palpitations2.lastExperienced", "q1", "Yes", codeDirectory.get("lastExperienced12Hrs"), true));
    insert( Outcome.of("syncope12hrs", ReferralRequest.builder()
                .id("ed-arrhythmia-emergency")
                .description("ED")
                .serviceRequested("ed")
                .occurrence("PT4h")
                .specialty("emergencyCareReview")
                .reason("arrhythmia")
                .note("A note")
                .build(),
            waitForAmbulance()));
    insert( new OutcomeAnswerCondition("syncope12hrs", "palpitations2.syncope", "q", Arrays.asList("Yes", "Unsure") ));
    insert( new OutcomeAnswerCondition("syncope12hrs", "palpitations2.lastExperienced", "q1", Arrays.asList("Yes") ));
    insert( new OutcomeAnswerCondition("syncope12hrs", "palpitations2.hasPalpitations", "q", Arrays.asList("No", "Unsure") ));
    insert( utcArrhythmia("notSyncope12hrs", "PT4h", "emergencyCareReview"));
    insert( new OutcomeAnswerCondition("notSyncope12hrs", "palpitations2.syncope", "q", Arrays.asList("No") ));
    insert( new OutcomeAnswerCondition("notSyncope12hrs", "palpitations2.lastExperienced", "q1", Arrays.asList("Yes") ));
    insert( new OutcomeAnswerCondition("notSyncope12hrs", "palpitations2.hasPalpitations", "q", Arrays.asList("No", "Unsure") ));

    //  If last experienced within 48 hours
    insert( new NextQuestion("palpitations2.syncope", "palpitations2.lastExperienced", "q2", Arrays.asList("Yes")));
    insert( new AnswerAssertion("palpitations2.lastExperienced", "q2", "Yes", codeDirectory.get("lastExperienced48Hrs"), true));
    insert( utcArrhythmia("syncope48hrs", "PT8h", "primaryCareReview"));
    insert( new OutcomeAnswerCondition("syncope48hrs", "palpitations2.syncope", "q", Arrays.asList("Yes", "Unsure") ));
    insert( new OutcomeAnswerCondition("syncope48hrs", "palpitations2.lastExperienced", "q2", Arrays.asList("Yes") ));
    insert( new OutcomeAnswerCondition("syncope48hrs", "palpitations2.hasPalpitations", "q", Arrays.asList("No", "Unsure") ));
    insert( gpArrhythmia("notSyncope48hrs", "PT24h"));
    insert( new OutcomeAnswerCondition("notSyncope48hrs", "palpitations2.syncope", "q", Arrays.asList("No") ));
    insert( new OutcomeAnswerCondition("notSyncope48hrs", "palpitations2.lastExperienced", "q2", Arrays.asList("Yes") ));
    insert( new OutcomeAnswerCondition("notSyncope48hrs", "palpitations2.hasPalpitations", "q", Arrays.asList("No", "Unsure") ));

    //  If last experienced more than 48 hours
    insert( new NextQuestion("palpitations2.syncope", "palpitations2.lastExperienced", "q3", Arrays.asList("Yes")));
    insert( new AnswerAssertion("palpitations2.lastExperienced", "q3", "Yes", codeDirectory.get("lastExperiencedMoreThan48"), true));
    insert( new AnswerAssertion("palpitations2.lastExperienced", "q3", "No", codeDirectory.get("lastExperiencedMoreThan48"), true));
    insert( new AnswerAssertion("palpitations2.lastExperienced", "q3", "Unsure", codeDirectory.get("lastExperiencedMoreThan48"), true));
    insert( gpArrhythmia("syncopeOver48hrs", "PT72h"));
    insert( new OutcomeAnswerCondition("syncopeOver48hrs", "palpitations2.syncope", "q", Arrays.asList("Yes", "Unsure") ));
    insert( new OutcomeAnswerCondition("syncopeOver48hrs", "palpitations2.lastExperienced", "q3", Arrays.asList("Yes", "No", "Unsure") ));
    insert( new OutcomeAnswerCondition("syncopeOver48hrs", "palpitations2.hasPalpitations", "q", Arrays.asList("No", "Unsure") ));

    // Have you been taking any of the following drugs or sniffing any of the following solvents?
    // cocaine, speed or marijuana. Solvents are things like glue, thinners, petrol or lighter fluid
    insert( new NextQuestion("palpitations2.drugUse", "palpitations2.syncope", "q", Arrays.asList("No")) );
    insert( Outcome.of("drugUse", ReferralRequest.builder()
                .id("utc-hcpReview-4h")
                .description("UTC")
                .serviceRequested("utc")
                .occurrence("PT4h")
                .specialty("hcpReview")
                .reason("adverseReaction")
                .note("A note")
                .build()));
    insert( new OutcomeAnswerCondition("drugUse", "palpitations2.drugUse", "q", Arrays.asList("Yes") ));

    // Have you started any new prescribed medication or stopped any prescribed medication
    insert( new NextQuestion("palpitations2.prescriptionUse", "palpitations2.drugUse", "q", Arrays.asList("No")) );
    insert( Outcome.of("prescriptionUse", ReferralRequest.builder()
                .id("gp-hcpReview-4h")
                .description("Consult GP")
                .serviceRequested("gp")
                .occurrence("PT12h")
                .specialty("gp")
                .reason("adverseReaction")
                .note("A note")
                .build()));
    insert( new OutcomeAnswerCondition("prescriptionUse", "palpitations2.prescriptionUse", "q", Arrays.asList("Yes", "Unsure") ));

    // Do you have any issues with Anxiety or panic attacks
    insert( new NextQuestion("palpitations2.anxiety", "palpitations2.prescriptionUse", "q", Arrays.asList("No")) );
    insert( new AnswerAssertion("palpitations2.anxiety", "q", "Yes", codeDirectory.get("anxiety"), true));

    // Are you under the care of a Healthcare professional
    insert( new NextQuestion("palpitations2.careHCP", "palpitations2.anxiety", "q", Arrays.asList("Yes")) );
    insert( new AnswerAssertion("palpitations2.careHCP", "q", "Yes", codeDirectory.get("careHCP"), true));

    // Do you have a care plan to follow
    insert( new NextQuestion("palpitations2.hasCarePlan", "palpitations2.careHCP", "q", Arrays.asList("Yes")) );
    insert( Outcome.of("hasCarePlan", defaultCarePlan()));
    insert( new OutcomeAnswerCondition("hasCarePlan", "palpitations2.hasCarePlan", "q", Arrays.asList("Yes") ));
    insert( Outcome.of("noCarePlan",  ReferralRequest.builder()
                .id("gp-anxiety-72h")
                .description("Consult GP")
                .serviceRequested("gp")
                .occurrence("PT72h")
                .specialty("gp")
                .reason("anxiety")
                .note("A note")
                .build()));
    insert( new OutcomeAnswerCondition("noCarePlan", "palpitations2.hasCarePlan", "q", Arrays.asList("No") ));

    // Is your mental health a concern to you
    insert( new NextQuestion("palpitations2.mentalHealthConcern", "palpitations2.careHCP", "q", Arrays.asList("No")) );
    insert( new AnswerAssertion("palpitations2.mentalHealthConcern", "q", "Yes", codeDirectory.get("mentalHealthConcern"), true));
    insert( singleCodeRedirection("mentalHealthConcern", "anxiety"));
    insert( new OutcomeAnswerCondition("mentalHealthConcern", "palpitations2.mentalHealthConcern", "q", Arrays.asList("Yes") ));

    //  Anxiety cause
    insert( singleCodeRedirection("anxiety", "anxiety"));
    insert( new OutcomeAnswerCondition("anxiety", "palpitations2.mentalHealthConcern", "q", Arrays.asList("Yes") ));

    // Do any of these apply to you?
    insert( new NextQuestion("palpitations2.causes", "palpitations2.mentalHealthConcern", "q", Arrays.asList("No")) );

    insert( new NextQuestion("palpitations2.ageRange", "palpitations2.anxiety", "q", Arrays.asList("No")));

    insert( new ConditionalNextQuestion("genderToCausesOver50", "palpitations2.causes", "common.gender") );
    insert( new NextQuestionCondition("genderToCausesOver50", "palpitations2.ageRange", "q", Arrays.asList(">50")) );
    insert( new NextQuestionCondition("genderToCausesOver50", "palpitations2.hasPalpitations", "q", Arrays.asList("No", "Unsure") ));
    insert( new ConditionalNextQuestion("genderToCausesOver12", "palpitations2.causes", "common.gender") );
    insert( new NextQuestionCondition("genderToCausesOver12", "palpitations2.ageRange", "q", Arrays.asList("45-50")) );
    insert( new NextQuestionCondition("genderToCausesOver12", "common.gender", "q", Arrays.asList("Male")) );
    insert( new NextQuestionCondition("genderToCausesOver12", "palpitations2.hasPalpitations", "q", Arrays.asList("No", "Unsure") ));

    insert( new ConditionalNextQuestion("pregnancyToCauses", "palpitations2.causes", "common.pregnant", "q", Arrays.asList("No", "Unsure")) );
    insert( new NextQuestionCondition("pregnancyToCauses", "palpitations2.ageRange", "q", Arrays.asList("45-50")) );
    insert( new NextQuestionCondition("pregnancyToCauses", "palpitations2.hasPalpitations", "q", Arrays.asList("No", "Unsure") ));

    insert( new ConditionalNextQuestion("familyHistoryToCauses", "palpitations2.causes", "palpitations2.familyHistory", "q", Arrays.asList("No", "Unsure")) );
    insert( new NextQuestionCondition("familyHistoryToCauses", "palpitations2.hasPalpitations", "q", Arrays.asList("No", "Unsure")) );

    //  Some foods cause
    insert( Outcome.of("someFoods", defaultCarePlan()));
    insert( new OutcomeAnswerCondition("someFoods", "palpitations2.causes", "q1", Arrays.asList("Yes") ));

    //  Some drinks cause
    insert( Outcome.of("someDrinks", defaultCarePlan()));
    insert( new OutcomeAnswerCondition("someDrinks", "palpitations2.causes", "q2", Arrays.asList("Yes") ));

    //  Smoker
    insert( Outcome.of("smoker", ReferralRequest.builder()
                .id("pharmacy-nicotine-168h")
                .description("Consult Pharmacy")
                .serviceRequested("pharmacy")
                .occurrence("PT168H")
                .specialty("pharmacistReview")
                .reason("nicotine")
                .note("A note")
                .build()));
    insert( new OutcomeAnswerCondition("smoker", "palpitations2.causes", "q3", Arrays.asList("Yes") ));

    //  No causes
    insert( Outcome.of("noCausesMentalHealthRoute", ReferralRequest.builder()
                .id("pharmacy-nicotine-168h")
                .description("Consult GP")
                .serviceRequested("gp")
                .specialty("gp")
                .note("A note")
                .build()));
    insert( new OutcomeAnswerCondition("noCausesMentalHealthRoute", "palpitations2.causes", "q4", Arrays.asList("Yes") ));
    insert( new OutcomeAnswerCondition("noCausesMentalHealthRoute", "palpitations2.anxiety", "q", Arrays.asList("Yes") ));

    insert( Outcome.of("noCausesNotMentalHealthRoute", defaultCarePlan()));
    insert( new OutcomeAnswerCondition("noCausesNotMentalHealthRoute", "palpitations2.causes", "q4", Arrays.asList("Yes") ));
    insert( new OutcomeAnswerCondition("noCausesNotMentalHealthRoute", "palpitations2.anxiety", "q", Arrays.asList("No") ));
end

rule "Add age assertion"
salience 100
when
    Assertion( code == codeDirectory.get(SnomedConstants.AGE), $value := value )
    not Assertion( code == codeDirectory.get("under12") )
    not Assertion( code == codeDirectory.get("between12and45") )
    not Assertion( code == codeDirectory.get("between45and50") )
    not Assertion( code == codeDirectory.get("under12") )
then
   int age = Constraints.convertAge($value);

   String assertionId;
   if (age < 12) {
       assertionId = "under12";
   } else if (age < 45) {
       assertionId = "between12and45";
   } else if (age < 50) {
       assertionId = "between45and50";
   } else {
       assertionId = "over50";
   }
   log.info("Generating age assertion: " + assertionId);
   insert( Assertion.builder()
        .id(assertionId)
        .status(Assertion.Status.AMENDED)
        .code(codeDirectory.get(assertionId))
        .value(true)
        .build() );
end