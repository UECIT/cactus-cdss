package uk.nhs.cdss.rules.vaginalDischarge

import java.util.Arrays

import uk.nhs.cdss.rules.InitialQuestionnaire
import uk.nhs.cdss.rules.NextQuestion
import uk.nhs.cdss.rules.ConditionalNextQuestion
import uk.nhs.cdss.rules.NextQuestionCondition
import uk.nhs.cdss.rules.AnswerAssertion
import uk.nhs.cdss.rules.OutcomeAnswerCondition
import uk.nhs.cdss.rules.AnswersOptional

import uk.nhs.cdss.domain.Questionnaire
import uk.nhs.cdss.domain.Outcome
import uk.nhs.cdss.domain.Answer
import uk.nhs.cdss.domain.Assertion
import uk.nhs.cdss.domain.QuestionnaireResponse
import uk.nhs.cdss.domain.CarePlan
import uk.nhs.cdss.domain.ReferralRequest
import uk.nhs.cdss.domain.Coordinates
import uk.nhs.cdss.domain.Concern
import uk.nhs.cdss.domain.Concern.ClinicalStatus
import uk.nhs.cdss.domain.Concern.VerificationStatus
import uk.nhs.cdss.domain.enums.ObservationTriggerValue
import uk.nhs.cdss.domain.enums.Concept

import uk.nhs.cdss.constants.SnomedConstants

import uk.nhs.cdss.engine.CodeDirectory
import uk.nhs.cdss.engine.Constraints
import org.slf4j.Logger

global Logger log;
global CodeDirectory codeDirectory;

function Outcome rupturedPid(String id, String secondaryReason) {
    return Outcome.of(id, ReferralRequest.builder()
                .id("ed-ectopic-ruptured-4h")
                .description("ED")
                .occurrence("PT4H")
                .reasonCode("medicalReview&surgicalReview")
                .reason(Concern.builder()
                    .condition("ectopic")
                    .verificationStatus(VerificationStatus.CONFIRMED)
                    .build())
                .secondaryReason(Concern.builder()
                    .condition(secondaryReason)
                    .build())
                .build());
}

rule "Init"
salience 10000
when // Always
then
    Concept present = ObservationTriggerValue.PRESENT;
    Concept absent = ObservationTriggerValue.ABSENT;

    insert (new InitialQuestionnaire("vaginalDischarge.termsAndConditions") );
    insert( new AnswerAssertion("vaginalDischarge.termsAndConditions", "q", "Yes", codeDirectory.get("termsAndConditions"), present));

    insert( new NextQuestion("vaginalDischarge.vaginalDischarge", "vaginalDischarge.termsAndConditions", "q", Arrays.asList("Yes")) );
    insert( new AnswerAssertion("vaginalDischarge.vaginalDischarge", "q", "Yes", codeDirectory.get("vaginalDischarge"), present));

    insert( new NextQuestion("vaginalDischarge.abdominalPain", "vaginalDischarge.vaginalDischarge", "q", Arrays.asList("Yes")) );
    insert( new AnswerAssertion("vaginalDischarge.abdominalPain", "q", "Yes", codeDirectory.get("abdominalPain"), present));
    insert( new AnswerAssertion("vaginalDischarge.abdominalPain", "q", "No", codeDirectory.get("abdominalPain"), absent));

    insert( new NextQuestion("vaginalDischarge.over50", "vaginalDischarge.abdominalPain", "q", Arrays.asList("No")) );

    insert( new NextQuestion("vaginalDischarge.painIntensity", "vaginalDischarge.abdominalPain", "q", Arrays.asList("Yes")) );
    insert( new AnswerAssertion("vaginalDischarge.painIntensity", "q", "inPain", codeDirectory.get("painPresent"), present) );

    insert( new NextQuestion("vaginalDischarge.over50", "vaginalDischarge.painIntensity") );
    insert( new AnswerAssertion("vaginalDischarge.over50", "q", "Yes", codeDirectory.get("over50"), present) );
    insert( new AnswerAssertion("vaginalDischarge.over50", "q", "No", codeDirectory.get("over50"), absent) );

    insert( new ConditionalNextQuestion("over50ToPregnant", "common.pregnant", "vaginalDischarge.over50", "q", Arrays.asList("No")) );
    insert( new NextQuestionCondition("over50ToPregnant", "vaginalDischarge.painIntensity", "q", Arrays.asList("inPain")) );
    insert( new ConditionalNextQuestion("over50ToPeriodNoPain", "vaginalDischarge.lastPeriod", "vaginalDischarge.over50", "q", Arrays.asList("No")) );
    insert( new NextQuestionCondition("over50ToPeriodNoPain", "vaginalDischarge.abdominalPain", "q", Arrays.asList("No")) );
    insert( new ConditionalNextQuestion("over50ToPeriodMildPain", "vaginalDischarge.lastPeriod", "vaginalDischarge.over50", "q", Arrays.asList("No")) );
    insert( new NextQuestionCondition("over50ToPeriodMildPain", "vaginalDischarge.painIntensity", "q", Arrays.asList("noPain")) );
    insert( new ConditionalNextQuestion("over50ToFever", "vaginalDischarge.fever", "vaginalDischarge.over50", "q", Arrays.asList("Yes")) );
    insert( new NextQuestionCondition("over50ToFever", "vaginalDischarge.painIntensity", "q", Arrays.asList("inPain")) );
    insert( new ConditionalNextQuestion("over50ToStiNoPain", "vaginalDischarge.sti", "vaginalDischarge.over50", "q", Arrays.asList("Yes")) );
    insert( new NextQuestionCondition("over50ToStiNoPain", "vaginalDischarge.abdominalPain", "q", Arrays.asList("No")) );
    insert( new ConditionalNextQuestion("over50ToStiMildPain", "vaginalDischarge.sti", "vaginalDischarge.over50", "q", Arrays.asList("Yes")) );
    insert( new NextQuestionCondition("over50ToStiMildPain", "vaginalDischarge.painIntensity", "q", Arrays.asList("noPain")) );

    insert( new ConditionalNextQuestion("pregnantToPainSymptoms", "vaginalDischarge.painSymptoms", "common.pregnant", "q", Arrays.asList("Yes", "Unsure")) );
    insert( new NextQuestionCondition("pregnantToPainSymptoms", "vaginalDischarge.painIntensity", "q", Arrays.asList("inPain")) );
    insert( new ConditionalNextQuestion("pregnantToPeriod", "vaginalDischarge.lastPeriod", "common.pregnant", "q", Arrays.asList("No")) );
    insert( new NextQuestionCondition("pregnantToPeriod", "vaginalDischarge.painIntensity", "q", Arrays.asList("inPain")) );
    insert( new ConditionalNextQuestion("pregnantToStiNoPain", "vaginalDischarge.sti", "common.pregnant", "q", Arrays.asList("No")) );
    insert( new NextQuestionCondition("pregnantToStiNoPain", "vaginalDischarge.abdominalPain", "q", Arrays.asList("No")) );
    insert( new ConditionalNextQuestion("pregnantToStiMildPain", "vaginalDischarge.sti", "common.pregnant", "q", Arrays.asList("No")) );
    insert( new NextQuestionCondition("pregnantToStiMildPain", "vaginalDischarge.painIntensity", "q", Arrays.asList("noPain")) );
    insert( rupturedPid("ed-ectopic-ruptured-4h-noPain", "rupturedEctopicPid") );
    insert( new OutcomeAnswerCondition("ed-ectopic-ruptured-4h-noPain", "common.pregnant", "q", Arrays.asList("Yes") ));
    insert( new OutcomeAnswerCondition("ed-ectopic-ruptured-4h-noPain", "vaginalDischarge.abdominalPain", "q", Arrays.asList("No")) );
    insert( rupturedPid("ed-ectopic-ruptured-4h-mildPain", "rupturedEctopicPid") );
    insert( new OutcomeAnswerCondition("ed-ectopic-ruptured-4h-mildPain", "common.pregnant", "q", Arrays.asList("Yes") ));
    insert( new OutcomeAnswerCondition("ed-ectopic-ruptured-4h-mildPain", "vaginalDischarge.painIntensity", "q", Arrays.asList("noPain")) );

    insert( new ConditionalNextQuestion("periodToFever", "vaginalDischarge.fever", "vaginalDischarge.lastPeriod") );
    insert( new NextQuestionCondition("periodToFever", "vaginalDischarge.painIntensity", "q", Arrays.asList("inPain")) );
    insert( new ConditionalNextQuestion("periodToPregnantNoPain", "common.pregnant", "vaginalDischarge.lastPeriod") );
    insert( new NextQuestionCondition("periodToPregnantNoPain", "vaginalDischarge.abdominalPain", "q", Arrays.asList("No")) );
    insert( new ConditionalNextQuestion("periodToPregnantMildPain", "common.pregnant", "vaginalDischarge.lastPeriod") );
    insert( new NextQuestionCondition("periodToPregnantMildPain", "vaginalDischarge.painIntensity", "q", Arrays.asList("noPain")) );
    
    insert( Outcome.of("call999-ectopic-ruptured-asap", ReferralRequest.builder()
                .id("call999-ectopic-ruptured-asap")
                .description("Call 999")
                .occurrence("PT0S")
                .reasonCode("medicalReview&surgicalReview")
                .reason(Concern.builder()
                    .condition("ectopic")
                    .verificationStatus(VerificationStatus.CONFIRMED)
                    .build())
                .secondaryReason(Concern.builder()
                    .condition("rupturedEctopic")
                    .build())
                .build()) );
    insert( new OutcomeAnswerCondition("call999-ectopic-ruptured-asap", "vaginalDischarge.painSymptoms", "q", Arrays.asList("Yes") ));
    insert( Outcome.of("ed-ectopic-ruptured-1h", ReferralRequest.builder()
                .id("ed-ectopic-ruptured-1h")
                .description("ED")
                .occurrence("PT1H")
                .reasonCode("medicalReview&surgicalReview")
                .reason(Concern.builder()
                    .condition("ectopic")
                    .verificationStatus(VerificationStatus.CONFIRMED)
                    .build())
                .secondaryReason(Concern.builder()
                    .condition("rupturedEctopic")
                    .build())
                .build()) );
    insert( new OutcomeAnswerCondition("ed-ectopic-ruptured-1h", "vaginalDischarge.painSymptoms", "q", Arrays.asList("No") ));

    insert( new AnswerAssertion("vaginalDischarge.fever", "q", "Yes", codeDirectory.get("fever"), present) );
    insert( new NextQuestion("vaginalDischarge.lastTemperatureReading", "vaginalDischarge.fever", "q", Arrays.asList("Yes")) );
    insert( Outcome.of("ed-ectopic-pelvic-4h", ReferralRequest.builder()
                .id("ed-ectopic-pelvic-4h")
                .description("ED")
                .occurrence("PT4H")
                .reasonCode("medicalReview")
                .reason(Concern.builder()
                    .condition("ectopic")
                    .verificationStatus(VerificationStatus.CONFIRMED)
                    .build())
                .secondaryReason(Concern.builder()
                    .condition("pelvicInflammatory")
                    .build())
                .build()) );
    insert( new OutcomeAnswerCondition("ed-ectopic-pelvic-4h", "vaginalDischarge.lastTemperatureReading", "q"));
    insert( new OutcomeAnswerCondition("ed-ectopic-pelvic-4h", "vaginalDischarge.fever", "q", Arrays.asList("Yes") ));
    insert( new OutcomeAnswerCondition("ed-ectopic-pelvic-4h", "vaginalDischarge.painIntensity", "q", Arrays.asList("inPain") ));

    insert( Outcome.of("gp-ectopic-pelvic-6h", ReferralRequest.builder()
                .id("gp-ectopic-pelvic-6h")
                .description("Contact General Practice Today")
                .occurrence("PT6H")
                .reasonCode("hcpReview&pregnancyTest")
                .reason(Concern.builder()
                    .condition("ectopic")
                    .verificationStatus(VerificationStatus.CONFIRMED)
                    .build())
                .secondaryReason(Concern.builder()
                    .condition("pelvicInflammatory")
                    .build())
                .build()) );
    insert( new OutcomeAnswerCondition("gp-ectopic-pelvic-6h", "vaginalDischarge.fever", "q", Arrays.asList("No") ));
    insert( new OutcomeAnswerCondition("gp-ectopic-pelvic-6h", "vaginalDischarge.painIntensity", "q", Arrays.asList("inPain") ));

    insert( new AnswerAssertion("vaginalDischarge.sti", "q", "Gonorrhoea", codeDirectory.get("gonorrhoea"), present) );
    insert( new AnswerAssertion("vaginalDischarge.sti", "q", "Chlamydia", codeDirectory.get("chlamydia"), present) );
    insert( new AnswerAssertion("vaginalDischarge.sti", "q", "Mycoplasma", codeDirectory.get("mycoplasma"), present) );
    insert( new AnswerAssertion("vaginalDischarge.sti", "q", "Genitalium", codeDirectory.get("genitalium"), present) );

    insert( Outcome.of("gum-stiReocurrence", ReferralRequest.builder()
                .id("gum-stiReocurrence")
                .description("GUM")
                .occurrence("P1D")
                .reasonCode("screening&contactTracing")
                .reason(Concern.builder()
                    .condition("stiReoccurrence")
                    .verificationStatus(VerificationStatus.CONFIRMED)
                    .clinicalStatus(ClinicalStatus.RECURRENCE)
                    .build())
                .secondaryReason(Concern.builder()
                    .condition("newStiInfection")
                    .build())
                .build()) );
    insert( new OutcomeAnswerCondition("gum-stiReocurrence", "vaginalDischarge.sti", "q", Arrays.asList("Gonorrhoea", "Chlamydia", "Mycoplasma", "Genitalium")) );

    insert( new NextQuestion("vaginalDischarge.dischargeDescription", "vaginalDischarge.sti", "q", Arrays.asList("none")) );
    insert( new AnswerAssertion("vaginalDischarge.dischargeDescription", "q", "whiteOrFishyDischarge", codeDirectory.get("whiteOrFishyDischarge"), present) );
    insert( new AnswerAssertion("vaginalDischarge.dischargeDescription", "q", "bloodStainedDischarge", codeDirectory.get("bloodStainedDischarge"), present) );
    insert( new AnswerAssertion("vaginalDischarge.dischargeDescription", "q", "colouredDischarge", codeDirectory.get("colouredDischarge"), present) );
    insert( new AnswerAssertion("vaginalDischarge.dischargeDescription", "q", "none", codeDirectory.get("genericDischarge"), present) );

    insert( Outcome.of("gp-candida-48h", ReferralRequest.builder()
                .id("gp-candida-48h")
                .description("General Practice")
                .occurrence("P2D")
                .reasonCode("primaryHcpReview")
                .reason(Concern.builder()
                    .condition("candida")
                    .verificationStatus(VerificationStatus.CONFIRMED)
                    .build())
                .secondaryReason(Concern.builder()
                    .condition("bacterialVaginosis")
                    .build())
                .build()) );
    insert( new OutcomeAnswerCondition("gp-candida-48h", "vaginalDischarge.dischargeDescription", "q", Arrays.asList("whiteOrFishyDischarge")) );
    insert( Outcome.of("gp-ectopic-cervical", ReferralRequest.builder()
                .id("gp-ectopic-cervical")
                .description("General Practice")
                .occurrence("P1D")
                .reasonCode("primaryHcpReview")
                .reason(Concern.builder()
                    .condition("ectopic")
                    .verificationStatus(VerificationStatus.CONFIRMED)
                    .build())
                .secondaryReason(Concern.builder()
                    .condition("cervical&uterine")
                    .build())
                .build()) );
    insert( new OutcomeAnswerCondition("gp-ectopic-cervical", "vaginalDischarge.dischargeDescription", "q", Arrays.asList("bloodStainedDischarge")) );
    insert( Outcome.of("gum-sti-foreignCervical", ReferralRequest.builder()
                .id("gum-sti-foreignCervical")
                .description("GUM")
                .occurrence("P1D")
                .reasonCode("screening&vaginalExam&contactTracing")
                .reason(Concern.builder()
                    .condition("sti")
                    .verificationStatus(VerificationStatus.CONFIRMED)
                    .build())
                .secondaryReason(Concern.builder()
                    .condition("foreign&cervical")
                    .build())
                .build()) );
    insert( new OutcomeAnswerCondition("gum-sti-foreignCervical", "vaginalDischarge.dischargeDescription", "q", Arrays.asList("colouredDischarge")) );

    insert( new NextQuestion("vaginalDischarge.fever", "vaginalDischarge.dischargeDescription", "q", Arrays.asList("none")) );

    insert( new ConditionalNextQuestion("feverToForeignBodyNoPain", "vaginalDischarge.foreignBody", "vaginalDischarge.fever", "q", Arrays.asList("No")) );
    insert( new NextQuestionCondition("feverToForeignBodyNoPain", "vaginalDischarge.abdominalPain", "q", Arrays.asList("No")) );
    insert( new ConditionalNextQuestion("feverToForeignBodyMildPain", "vaginalDischarge.foreignBody", "vaginalDischarge.fever", "q", Arrays.asList("No")) );
    insert( new NextQuestionCondition("feverToForeignBodyMildPain", "vaginalDischarge.painIntensity", "q", Arrays.asList("noPain")) );

    insert( new ConditionalNextQuestion("lastTempToForeignBodyNoPain", "vaginalDischarge.foreignBody", "vaginalDischarge.lastTemperatureReading") );
    insert( new NextQuestionCondition("lastTempToForeignBodyNoPain", "vaginalDischarge.abdominalPain", "q", Arrays.asList("No")) );
    insert( new ConditionalNextQuestion("lastTempToForeignBodyMildPain", "vaginalDischarge.foreignBody", "vaginalDischarge.lastTemperatureReading") );
    insert( new NextQuestionCondition("lastTempToForeignBodyMildPain", "vaginalDischarge.painIntensity", "q", Arrays.asList("noPain")) );

    insert( new AnswerAssertion("vaginalDischarge.foreignBody", "q", "Yes", codeDirectory.get("foreignBody"), present) );
    insert( new AnswerAssertion("vaginalDischarge.foreignBody", "q", "Unsure", codeDirectory.get("foreignBody"), present) );
    insert( new AnswerAssertion("vaginalDischarge.foreignBody", "q", "No", codeDirectory.get("foreignBody"), absent) );

    insert( new NextQuestion("vaginalDischarge.rash", "vaginalDischarge.foreignBody", "q", Arrays.asList("Yes", "Unsure")) );
    insert( Outcome.of("utc-strepto", ReferralRequest.builder()
                .id("utc-strepto")
                .description("UTC")
                .occurrence("PT1H")
                .reasonCode("assessment&removal")
                .reason(Concern.builder()
                    .condition("strepto")
                    .verificationStatus(VerificationStatus.CONFIRMED)
                    .build())
                .secondaryReason(Concern.builder()
                    .condition("bacterialInfection")
                    .build())
                .build()) );
    insert( new OutcomeAnswerCondition("utc-strepto", "vaginalDischarge.rash", "q") );

    insert( new NextQuestion("vaginalDischarge.blisters", "vaginalDischarge.foreignBody", "q", Arrays.asList("No")) );
    insert( new AnswerAssertion("vaginalDischarge.blisters", "q", "Yes", codeDirectory.get("blisters"), present) );
    insert( new AnswerAssertion("vaginalDischarge.blisters", "q", "No", codeDirectory.get("blisters"), absent) );

    insert( new NextQuestion("vaginalDischarge.herpes", "vaginalDischarge.blisters", "q", Arrays.asList("Yes")) );
    insert( new AnswerAssertion("vaginalDischarge.herpes", "q", "Yes", codeDirectory.get("herpes"), present) );
    insert( new AnswerAssertion("vaginalDischarge.herpes", "q", "No", codeDirectory.get("herpes"), absent) );
    insert( Outcome.of("gp-herpes", ReferralRequest.builder()
                .id("gp-herpes")
                .description("General practice")
                .occurrence("PT24H")
                .reasonCode("primaryHcpReview")
                .reason(Concern.builder()
                    .condition("herpes")
                    .verificationStatus(VerificationStatus.CONFIRMED)
                    .build())
                .secondaryReason(Concern.builder()
                    .condition("shingles")
                    .build())
                .build()) );
    insert( new OutcomeAnswerCondition("gp-herpes", "vaginalDischarge.herpes", "q", Arrays.asList("Yes")) );
    insert( Outcome.of("gum-herpes", ReferralRequest.builder()
                .id("gum-herpes")
                .description("GUM")
                .occurrence("PT24H")
                .reasonCode("screening&vaginalExam")
                .reason(Concern.builder()
                    .condition("primaryHerpes")
                    .verificationStatus(VerificationStatus.CONFIRMED)
                    .build())
                .secondaryReason(Concern.builder()
                    .condition("shingles")
                    .build())
                .build()) );
    insert( new OutcomeAnswerCondition("gum-herpes", "vaginalDischarge.herpes", "q", Arrays.asList("No")) );

    insert( new NextQuestion("vaginalDischarge.urine", "vaginalDischarge.blisters", "q", Arrays.asList("No")) );
    insert( new NextQuestion("vaginalDischarge.urine", "vaginalDischarge.vaginalDischarge", "q", Arrays.asList("No")) );
    insert( new AnswerAssertion("vaginalDischarge.urine", "q", "Yes", codeDirectory.get("urine"), present) );
    insert( new AnswerAssertion("vaginalDischarge.urine", "q", "No", codeDirectory.get("urine"), absent) );

    insert( new NextQuestion("vaginalDischarge.symptoms", "vaginalDischarge.urine", "q", Arrays.asList("Yes")) );
    insert( new AnswerAssertion("vaginalDischarge.symptoms", "q", "burningOrStinging", codeDirectory.get("burningOrStinging"), present) );
    insert( new AnswerAssertion("vaginalDischarge.symptoms", "q", "urineUnable", codeDirectory.get("urineUnable"), present) );
    insert( new AnswerAssertion("vaginalDischarge.symptoms", "q", "none", codeDirectory.get("noUrineSymptoms"), present) );
    insert( Outcome.of("gp-uti", ReferralRequest.builder()
                .id("gp-uti")
                .description("General practice")
                .occurrence("PT48H")
                .reasonCode("urineTesting&hcpAssessment&diagnosis")
                .reason(Concern.builder()
                    .condition("uti")
                    .verificationStatus(VerificationStatus.CONFIRMED)
                    .build())
                .secondaryReason(Concern.builder()
                    .condition("cystitis&incontinence")
                    .build())
                .build()) );
    insert( new OutcomeAnswerCondition("gp-uti", "vaginalDischarge.symptoms", "q", Arrays.asList("burningOrStinging")) );
    insert( Outcome.of("utc-urineRetention", ReferralRequest.builder()
                .id("utc-urineRetention")
                .description("UTC")
                .occurrence("PT4H")
                .reasonCode("catheterisation&hcpAssessment&diagnosis")
                .reason(Concern.builder()
                    .condition("acuteUrineRetention")
                    .verificationStatus(VerificationStatus.CONFIRMED)
                    .build())
                .secondaryReason(Concern.builder()
                    .condition("uti&sti&neurogenic")
                    .build())
                .build()) );
    insert( new OutcomeAnswerCondition("utc-urineRetention", "vaginalDischarge.symptoms", "q", Arrays.asList("urineUnable")) );

    insert( new NextQuestion("vaginalDischarge.potentialDischargeDescription", "vaginalDischarge.symptoms", "q", Arrays.asList("none")) );
    insert( new AnswerAssertion("vaginalDischarge.potentialDischargeDescription", "q", "whiteOrFishyDischarge", codeDirectory.get("whiteOrFishyDischarge"), present) );
    insert( new AnswerAssertion("vaginalDischarge.potentialDischargeDescription", "q", "bloodStainedDischarge", codeDirectory.get("bloodStainedDischarge"), present) );
    insert( new AnswerAssertion("vaginalDischarge.potentialDischargeDescription", "q", "colouredDischarge", codeDirectory.get("colouredDischarge"), present) );
    insert( new AnswerAssertion("vaginalDischarge.potentialDischargeDescription", "q", "none", codeDirectory.get("genericDischarge"), present) );

    insert( Outcome.of("gp-candida-routine", ReferralRequest.builder()
                .id("gp-candida-routine")
                .description("General Practice")
                .occurrence("routine")
                .reasonCode("urineTesting&hcpAssessment&diagnosis")
                .reason(Concern.builder()
                    .condition("candida")
                    .verificationStatus(VerificationStatus.CONFIRMED)
                    .build())
                .secondaryReason(Concern.builder()
                    .condition("bacterialVaginosis")
                    .build())
                .build()) );
    insert( new OutcomeAnswerCondition("gp-candida-routine", "vaginalDischarge.potentialDischargeDescription", "q", Arrays.asList("whiteOrFishyDischarge")) );
    insert( Outcome.of("gp-cervical", ReferralRequest.builder()
                .id("gp-cervical")
                .description("General Practice")
                .occurrence("P2D")
                .reasonCode("screening&vaginalExam")
                .reason(Concern.builder()
                    .condition("cervical")
                    .build())
                .secondaryReason(Concern.builder()
                    .condition("detrusor&bladder")
                    .build())
                .build()) );
    insert( new OutcomeAnswerCondition("gp-cervical", "vaginalDischarge.potentialDischargeDescription", "q", Arrays.asList("bloodStainedDischarge")) );
    insert( Outcome.of("gum-sti-additionalTesting", ReferralRequest.builder()
                .id("gum-sti-additionalTesting")
                .description("GUM")
                .occurrence("P1D")
                .reasonCode("screening&vaginalExam")
                .reason(Concern.builder()
                    .condition("sti")
                    .build())
                .secondaryReason(Concern.builder()
                    .condition("stiTesting")
                    .build())
                .build()) );
    insert( new OutcomeAnswerCondition("gum-sti-additionalTesting", "vaginalDischarge.potentialDischargeDescription", "q", Arrays.asList("colouredDischarge")) );

    insert( Outcome.of("selfCare", CarePlan.builder()
                .id("selfCare")
                .title("Self care")
                .textLine("Take care of yourself")
                .reason(Concern.builder()
                    .condition("sti")
                    .build())
                .build()) );
    insert( new OutcomeAnswerCondition("selfCare", "vaginalDischarge.potentialDischargeDescription", "q", Arrays.asList("none")) );
    
    insert( new NextQuestion("vaginalDischarge.assault", "vaginalDischarge.urine", "q", Arrays.asList("No")) );
    insert( new AnswerAssertion("vaginalDischarge.assault", "q", "Yes", codeDirectory.get("assault"), present) );
    insert( new AnswerAssertion("vaginalDischarge.assault", "q", "No", codeDirectory.get("assault"), absent) );
    
    insert( new NextQuestion("vaginalDischarge.injuries", "vaginalDischarge.assault", "q", Arrays.asList("Yes")) );
    insert( new AnswerAssertion("vaginalDischarge.injuries", "q", "Yes", codeDirectory.get("injuries"), present) );
    insert( new AnswerAssertion("vaginalDischarge.injuries", "q", "No", codeDirectory.get("injuries"), present) );
    insert( new AnswerAssertion("vaginalDischarge.injuries", "q", "Unsure", codeDirectory.get("injuries"), present) );
    
    insert( new NextQuestion("vaginalDischarge.injuriesPlacement", "vaginalDischarge.injuries", "q", Arrays.asList("Yes", "No", "Unsure")) );

    insert( new NextQuestion("vaginalDischarge.problemDescription", "vaginalDischarge.assault", "q", Arrays.asList("No")) );
    insert( new AnswerAssertion("vaginalDischarge.problemDescription", "q", "Yes", codeDirectory.get("problemDescription"), present) );
    insert( Outcome.of("gp-dyspareunia", ReferralRequest.builder()
                .id("gp-dyspareunia")
                .description("Contact General Practice")
                .occurrence("routine")
                .reasonCode("examination&diagnosis")
                .reason(Concern.builder()
                    .condition("dyspareunia")
                    .build())
                .secondaryReason(Concern.builder()
                    .condition("bacterialOrYeastInfection")
                    .build())
                .build()) );
    insert( new OutcomeAnswerCondition("gp-dyspareunia", "vaginalDischarge.problemDescription", "q") );
end

rule "Add age assertion"
salience 100
when
    Assertion( code == codeDirectory.get(SnomedConstants.AGE), $value := value )
    not Assertion( code == codeDirectory.get("over50") )
then
   log.info("Generating age assertion: over50");
   insert( Assertion.builder()
        .id("over50")
        .status(Assertion.Status.AMENDED)
        .code(codeDirectory.get("over50"))
        .value(Constraints.convertAge($value) > 50)
        .build() );
end

//TODO capture and interpret answers dynamically
rule "Coordinates answer"
when
    $a: Answer(questionnaireId == "vaginalDischarge.injuriesPlacement")
then
    log.info("vaginalDischarge.injuriesPlacement answered");
    String location;

    if (((Coordinates)$a.getValue()).getY() < 64) {
        location = "head";
    }
    else if (((Coordinates)$a.getValue()).getY() < 200) {
        location = "torso";
    }
    else {
        location = "legs";
    }
    insert( Outcome.of("ed-rapeCare", ReferralRequest.builder()
            .id("ed-rapeCare")
            .description("ED")
            .occurrence("PT1H")
            .reasonCode("pep&counselling&police")
            .reason(Concern.builder()
                .condition("rapeCare")
                .bodySite(location)
                .verificationStatus(VerificationStatus.CONFIRMED)
                .build())
            .secondaryReason(Concern.builder()
                .condition("abuse&trafficking")
                .build())
            .build()) );
end